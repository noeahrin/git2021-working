{"version":3,"sources":["domain/todo/TodoEditModal.tsx","domain/todo/Todo.tsx"],"names":["TodoEditModal","item","onClose","onSave","profile","useSelector","state","inputRef","useRef","className","style","backgroundColor","onClick","e","stopPropagation","type","defaultValue","memo","ref","todo","id","username","current","value","image","createTime","save","getTimeString","unixtime","dateTime","Date","getTime","toLocaleDateString","toLocaleTimeString","Todo","useState","todoList","setTodoList","isEdit","setIsEdit","formRef","ulRef","editItem","width","src","height","alt","console","log","produce","find","onSubmit","preventDefault","placeholder","length","unshift","reset","add","map","index","fontSize","backgroundPosition","backgroundRepeat","backgroundSize","borderRadius","edit","splice","del"],"mappings":"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","file":"static/js/5.35defdf1.chunk.js","sourcesContent":["import { useRef } from \"react\";\r\nimport { TodoItemState } from \"./type\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../store\";\r\n// { 함수속성 }\r\n// 함수속성의 타입: (매개변수타입) => 리턴타입\r\n// 함수(ex. 부모state제어)를 부모 컴포넌트로 부터 매개변수(prop)를 받음\r\n// 자식컴포넌트에서 이벤트가 발생하면 prop으로 받은 함수를 실행\r\n\r\ninterface ModalProp {\r\n  item: TodoItemState;\r\n  onClose: () => void; // 콜백함수\r\n  onSave: (editItem: TodoItemState) => void; // 콜백함수\r\n}\r\n\r\nconst TodoEditModal = ({ item, onClose, onSave }: ModalProp) => {\r\n\r\n  const profile = useSelector((state: RootState) => state.profile);\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const save = () => {\r\n    const todo: TodoItemState = {\r\n      id: item.id,\r\n      username: profile.username,\r\n      memo: inputRef.current?.value, // 수정된 입력값\r\n      image: profile.image,\r\n      createTime: item.createTime,\r\n    };\r\n    onSave(todo);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"modal d-block\"\r\n      style={{ backgroundColor: \"rgba(0, 0, 0, 0.5)\" }}\r\n      onClick={() => {\r\n        onClose();\r\n      }}\r\n    >\r\n      <div className=\"modal-dialog\">\r\n        <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\">EDIT TODO</h5>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn-close\"\r\n              aria-label=\"Close\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            ></button>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            <input\r\n              type=\"text\"\r\n              defaultValue={item.memo}\r\n              className=\"w-100\"\r\n              ref={inputRef}\r\n            />\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              닫기\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={() => {\r\n                save();\r\n              }}\r\n            >\r\n              저장\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoEditModal;\r\n","import { useRef, useState } from \"react\";\r\nimport produce from \"immer\";\r\n\r\nimport TodoEditModal from \"./TodoEditModal\";\r\n// ./type.ts/js/tsx가 없으면, ./type/index.ts/js/tsx 로딩함\r\nimport { TodoItemState } from \"./type\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../store\";\r\n\r\nconst getTimeString = (unixtime: number) => {\r\n  // 1초: 1000\r\n  // 1분: 60 * 1000\r\n  // 1시간: 60 * 60 * 1000\r\n  // 1일: 24 * 60 * 60 * 1000\r\n  const day = 24 * 60 * 60 * 1000;\r\n\r\n  // Locale: timezone, currency 등\r\n  // js에서는 브라우저의 정보를 이용함\r\n  const dateTime = new Date(unixtime);\r\n\r\n  // 현재시간보다 24시간 이전이면 날짜를 보여주고\r\n  // 현재시간보다 24시간 미만이면 시간을 보여줌\r\n  return unixtime - new Date().getTime() >= day\r\n    ? dateTime.toLocaleDateString()\r\n    : dateTime.toLocaleTimeString();\r\n};\r\n\r\nconst Todo = () => {\r\n  // profile state를 가져옴 + state가 변경되면 컴포넌트를 업데이트(diff+render)함\r\n  const profile = useSelector((state: RootState) => state.profile);\r\n\r\n  const [todoList, setTodoList] = useState<TodoItemState[]>([\r\n    {\r\n      id: 2,\r\n      memo: \"Typescript\",\r\n      username: profile.username,\r\n      createTime: new Date().getTime(),\r\n    },\r\n    {\r\n      id: 1,\r\n      memo: \"React State 연습\",\r\n      username: profile.username,\r\n      createTime: new Date().getTime(),\r\n    },\r\n  ]);\r\n\r\n  // 수정 팝업을 띄울지 아닐지\r\n  const [isEdit, setIsEdit] = useState(false);\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const formRef = useRef<HTMLFormElement>(null);\r\n  const ulRef = useRef<HTMLUListElement>(null);\r\n\r\n  const add = () => {\r\n    const todo: TodoItemState = {\r\n      id: todoList.length > 0 ? todoList[0].id + 1 : 1,\r\n      memo: inputRef.current?.value,\r\n      username: profile.username,\r\n      image: profile.image,\r\n      createTime: new Date().getTime(),\r\n    };\r\n    setTodoList(\r\n      produce((state) => {\r\n        state.unshift(todo);\r\n      })\r\n    );\r\n\r\n    // 입력값 초기화\r\n    formRef.current?.reset();\r\n  };\r\n\r\n  const del = (id: number, index: number) => {\r\n    console.log(id);\r\n    // immer로 state 배열 직접 조작(index로 삭제)\r\n    setTodoList(\r\n      produce((state) => {\r\n        state.splice(index, 1);\r\n      })\r\n    );\r\n  };\r\n\r\n  // 컴포넌트가 업데이트 되도 유지시킬 수 있는 변수\r\n  // 수정할 todo객체\r\n  const editItem = useRef<TodoItemState>({\r\n    id: 0,\r\n    memo: \"\",\r\n    username: profile.username,\r\n    createTime: 0,\r\n  });\r\n\r\n  const edit = (item: TodoItemState) => {\r\n    // 수정할 todo객체\r\n    editItem.current = item;\r\n    // 모달 팝업을 보여주기\r\n    setIsEdit(true);\r\n  };\r\n\r\n  const save = (editItem: TodoItemState) => {\r\n    console.log(editItem);\r\n    setTodoList(\r\n      produce((state) => {\r\n        const item = state.find((item) => item.id === editItem.id);\r\n        if (item) {\r\n          item.memo = editItem.memo;\r\n          item.username = editItem.username;\r\n          item.image = editItem.image;\r\n        }\r\n      })\r\n    );\r\n\r\n    // 모달창 닫기\r\n    setIsEdit(false);\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: \"40vw\" }} className=\"mx-auto\">\r\n      <h2 className=\"text-center my-5\">할 일 관리</h2>\r\n      {/* profile 정보 확인용 */}\r\n      <div>\r\n        <img\r\n          src={profile.image}\r\n          width={150}\r\n          height={100}\r\n          alt={profile.username}\r\n        />\r\n        <span>{profile.username}</span>\r\n      </div>\r\n      {/* isEdit state가 true일 때만 Modal 창이 보임 */}\r\n      {isEdit && (\r\n        <TodoEditModal\r\n          item={editItem.current}\r\n          onClose={() => {\r\n            setIsEdit(false);\r\n          }}\r\n          onSave={(editItem) => {\r\n            save(editItem);\r\n          }}\r\n        />\r\n      )}\r\n      <form\r\n        className=\"d-flex\"\r\n        ref={formRef}\r\n        onSubmit={(e) => e.preventDefault()}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control me-2\"\r\n          placeholder=\"할 일 ...\"\r\n          ref={inputRef}\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-primary text-nowrap\"\r\n          onClick={() => {\r\n            add();\r\n          }}\r\n        >\r\n          추가\r\n        </button>\r\n      </form>\r\n      <ul id=\"ul-list\" className=\"list-group list-group-flush mt-3\" ref={ulRef}>\r\n        {/* 데이터와 UI요소 바인딩 */}\r\n        {todoList.map((item, index) => (\r\n          <li className=\"list-group-item d-flex\" key={item.id}>\r\n            <div className=\"w-100\">\r\n              <span className=\"me-1\">{item.memo}</span>\r\n              <span style={{ fontSize: \"0.75rem\" }}>\r\n                - <img\r\n                  src={item.image}\r\n                  style={{\r\n                    width: \"24px\",\r\n                    height: \"24px\",\r\n                    backgroundPosition: \"center\",\r\n                    backgroundRepeat: \"no-repeat\",\r\n                    backgroundSize: \"cover\",\r\n                    borderRadius: \"50%\"\r\n                  }}\r\n                  alt={profile.username}\r\n                />\r\n                {item.username}, {getTimeString(item.createTime)}\r\n              </span>\r\n            </div>\r\n            <button\r\n              className=\"btn btn-outline-secondary btn-sm text-nowrap me-1\"\r\n              onClick={() => {\r\n                // 수정 모달 팝업 띄우고 데이터 객체 넘겨주기\r\n                edit(item);\r\n              }}\r\n            >\r\n              수정\r\n            </button>\r\n            <button\r\n              className=\"btn btn-outline-secondary btn-sm text-nowrap\"\r\n              onClick={() => {\r\n                del(item.id, index);\r\n              }}\r\n            >\r\n              삭제\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n"],"sourceRoot":""}